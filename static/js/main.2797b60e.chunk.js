(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{11:function(e,n,t){e.exports=t.p+"static/media/info-circle.454c21c7.svg"},12:function(e,n,t){e.exports=t(210)},18:function(e,n,t){},19:function(e,n,t){},20:function(e,n,t){},209:function(e,n,t){},210:function(e,n,t){"use strict";t.r(n);var i=t(0),r=t.n(i),o=t(9),a=t.n(o),s=(t(18),t(1)),l=t(2),d=t(4),c=t(3),p=t(5),f=(t(19),t(20),t(6)),u=t.n(f),_=(t(207),function(e){function n(){return Object(s.a)(this,n),Object(d.a)(this,Object(c.a)(n).apply(this,arguments))}return Object(p.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){u.a.initHighlighting()}},{key:"componentDidUpdate",value:function(){document.querySelectorAll("pre code").forEach(function(e){u.a.highlightBlock(e)})}},{key:"render",value:function(){return r.a.createElement("div",{className:"CodeDisplay"},r.a.createElement("pre",null,r.a.createElement("code",{className:this.props.language},this.props.content)))}}]),n}(r.a.Component)),h=t(7),g=t.n(h),m=t(10),y=(t(209),function(e){function n(e){var t;return Object(s.a)(this,n),(t=Object(d.a)(this,Object(c.a)(n).call(this,e))).state={language:"python",minStep:3,maxStep:5},t}return Object(p.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){document.getElementById("min-step").value=this.state.minStep,document.getElementById("max-step").value=this.state.maxStep,document.getElementById("programming-language").value="python"}},{key:"handleFile",value:function(){var e=Object(m.a)(g.a.mark(function e(n){var t;return g.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,this.readFile(n);case 3:t=e.sent,this.handleChange({content:t}),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),console.error(e.t0.message);case 10:case"end":return e.stop()}},e,this,[[0,7]])}));return function(n){return e.apply(this,arguments)}}()},{key:"readFile",value:function(e){var n=new FileReader;return new Promise(function(t,i){n.onerror=function(){n.abort(),i(new DOMException("An error occured when reading the file"))},n.onloadend=function(){t(n.result)},n.readAsText(e)})}},{key:"handleLanguage",value:function(e){this.handleChange({language:e.target.value})}},{key:"handleMinStep",value:function(e){this.handleChange({minStep:e.target.value})}},{key:"handleMaxStep",value:function(e){this.handleChange({maxStep:e.target.value})}},{key:"handleChange",value:function(e){this.props.onUpdate(e)}},{key:"render",value:function(){var e=this;return r.a.createElement("div",{className:"InfoPanel"},r.a.createElement("h1",null,"Fake Code Typer"),r.a.createElement("div",{className:"description"},r.a.createElement("p",null,"Settings will be automatically saved"),r.a.createElement("p",null,"The editor will be reset when changes saved"),r.a.createElement("p",null,"Click the info icon to close this panel and start typing"),r.a.createElement("p",null,"You can click the icon again to show this panel")),r.a.createElement("h2",null,"Source Code File"),r.a.createElement("button",{onClick:function(e){document.getElementById("file").click(),e.preventDefault()}},"Browse..."),r.a.createElement("input",{type:"file",id:"file",name:"file",multiple:!1,onChange:function(n){e.handleFile(n.target.files[0])}}),r.a.createElement("h2",null,"Programming Language"),r.a.createElement("select",{id:"programming-language",name:"programming-language",onChange:function(n){e.handleLanguage(n)}},r.a.createElement("option",{value:"c"},"C"),r.a.createElement("option",{value:"cpp"},"C++"),r.a.createElement("option",{value:"cs"},"C#"),r.a.createElement("option",{value:"css"},"CSS"),r.a.createElement("option",{value:"html"},"HTML"),r.a.createElement("option",{value:"java"},"Java"),r.a.createElement("option",{value:"javascript"},"JavaScript"),r.a.createElement("option",{value:"json"},"JSON"),r.a.createElement("option",{value:"markdown"},"Markdown"),r.a.createElement("option",{value:"objc"},"Objective-C"),r.a.createElement("option",{value:"python"},"Python"),r.a.createElement("option",{value:"x86asm"},"x86 Assembly")),r.a.createElement("h2",null,"Min step"),r.a.createElement("input",{type:"number",id:"min-step",min:"1",step:"1",onChange:function(n){e.handleMinStep(n)}}),r.a.createElement("h2",null,"Max step"),r.a.createElement("input",{type:"number",id:"max-step",min:"1",step:"1",onChange:function(n){e.handleMaxStep(n)}}),r.a.createElement("div",{className:"footer"},r.a.createElement("p",null,"Created by ",r.a.createElement("a",{href:"https://github.com/WANGJIEKE",target:"_blank",rel:"noreferrer noopener"},"WANGJIEKE")," with ",r.a.createElement("span",{role:"img","aria-label":"love"},"\u2764\ufe0f"),r.a.createElement("br",null),"Please check the ",r.a.createElement("a",{href:"https://github.com/WANGJIEKE/fake-code-typer",target:"_blank",rel:"noreferrer noopener"},"GitHub repo")," for source code",r.a.createElement("br",null),r.a.createElement("span",null,"Syntax highlighting by ",r.a.createElement("a",{href:"https://highlightjs.org",target:"_blank",rel:"noreferrer noopener"},"highlight.js"),"; icons from ",r.a.createElement("a",{href:"https://www.iconfont.cn/collections/detail?cid=9402",target:"_blank",rel:"noreferrer noopener"},"Ant Design icon library")))))}}]),n}(r.a.Component)),w=t(11),E=t.n(w),v="# -*- coding: utf-8 -*-\n# @GitHub Link: https://github.com/WANGJIEKE/PyShell\n\nimport cmd\nimport getpass\nimport itertools\nimport os\nimport shlex\nimport signal\nimport socket\nimport sys\n\n\nclass PyShell(cmd.Cmd):\n    @staticmethod\n    def home_abbr_to_full(abbr_path: str) -> str:\n        if abbr_path.startswith('~'):\n            abbr_path = abbr_path.replace('~', os.environ['HOME'], 1)\n        return abbr_path\n    \n    @staticmethod\n    def full_to_home_abbr(full_path: str) -> str:\n        if full_path.startswith(os.environ['HOME']):\n            full_path = full_path.replace(os.environ['HOME'], '~', 1)\n        return full_path\n\n    def __init__(self):\n        \"\"\"initialize PyShell object\"\"\"\n        super(PyShell, self).__init__()\n        self.intro = '==== Welcome to PyShell ===='\n        self.prompt = f'{getpass.getuser()}@{socket.gethostname()}:{PyShell.full_to_home_abbr(os.getcwd())}$ '\n        self.jobs = []\n\n    def cmdloop(self, intro=None):\n        while True:\n            try:\n                super(PyShell, self).cmdloop()\n            except KeyboardInterrupt:\n                print()\n                self.intro = ''\n                continue\n\n    def do_fg(self, _: str) -> None:\n        \"\"\"usage: fg [pid]\n        bring the most recent background job to foreground\"\"\"\n        print('fg: not implemented yet')\n\n    def do_jobs(self, _: str) -> None:\n        \"\"\"usage: jobs\n        list all background jobs\"\"\"\n        print('jobs: not implemented yet')\n\n    def do_exit(self, arg_str: str) -> None:\n        \"\"\"usage: exit [exitcode]\"\"\"\n        args = shlex.split(arg_str)\n        if len(args) > 1:\n            print('exit: too many arguments', file=sys.stderr)\n            return\n        if len(args) == 0 or args[0] == '':\n            exit(0)\n        try:\n            exit(int(args[0]))\n        except ValueError:\n            print('exit: invalid exit code', file=sys.stderr)\n\n    def do_cd(self, arg_str: str) -> None:\n        \"\"\"usage: cd target_path\"\"\"\n        args = shlex.split(arg_str)\n        if len(args) > 1:\n            print('cd: too many arguments', file=sys.stderr)\n            return\n        try:\n            if len(args) == 0 or args[0] == '':\n                os.chdir(os.environ['HOME'])\n            else:\n                os.chdir(PyShell.home_abbr_to_full(args[0]))\n        except FileNotFoundError:\n            print('cd: invalid path', file=sys.stderr)\n        except NotADirectoryError:\n            print('cd: not a directory', file=sys.stderr)\n        else:\n            self.prompt = f'{getpass.getuser()}@{socket.gethostname()}:{PyShell.full_to_home_abbr(os.getcwd())}$ '\n\n    def do_EOF(self, _: str) -> None:\n        \"\"\"EOF handler; equivalent to type exit\"\"\"\n        print()\n        exit(0)\n\n    def default(self, line: str) -> None:\n        \"\"\"handler for undocumented inputs\"\"\"\n        commands = shlex.split(line)\n\n        self.main_function(\n            [list(command)\n             for is_pipe_operator, command in itertools.groupby(commands, lambda word: word == '|')\n             if not is_pipe_operator],\n            '&' not in commands\n        )\n\n    def main_function(self, args_list: [[str]], is_foreground=True) -> None:\n        \"\"\"handler for command execution\"\"\"\n        children_pids = []\n        new_fds, old_fds = [], []\n\n        if not is_foreground:  # background support not implemented\n            while True:\n                _input = input('pysh: background process not implement yet. Rerun on foreground? [y/n] ')\n                if _input == 'y':\n                    args_list[-1].pop()\n                    is_foreground = True\n                    break\n                elif _input == 'n':\n                    return\n                else:\n                    print('\tenter either \"y\" or \"n\"')\n\n        def _clean_up(error: OSError) -> None:\n            map(lambda _pid: os.kill(_pid, signal.SIGKILL), children_pids)\n            print(f'{args_list[i][0]}: {error}', file=sys.stderr)\n\n        pid = -1\n\n        try:\n            for i in range(len(args_list)):\n                if i < len(args_list) - 1:  # if there is a next cmd\n                    new_fds = os.pipe()\n\n                pid = os.fork()\n                if pid == 0:\n                    redirect_result, args_list[i] = PyShell.redirection_handler(args_list[i])\n\n                    if i < len(args_list) - 1:  # if there is a next cmd\n                        os.close(new_fds[0])\n                        os.dup2(new_fds[1], sys.stdout.fileno())\n                        os.close(new_fds[1])\n\n                        if redirect_result[sys.stdout.fileno()] is True:\n                            raise OSError('invalid usage of redirection and (or) piping')\n\n                    if i > 0:  # if there is a previous cmd\n                        os.dup2(old_fds[0], sys.stdin.fileno())\n                        os.close(old_fds[0])\n                        os.close(old_fds[1])\n\n                        if redirect_result[sys.stdin.fileno()] is True:\n                            raise OSError('invalid usage of redirection and (or) piping')\n\n                    os.execvp(args_list[i][0], args_list[i])\n\n                else:\n                    children_pids.append(pid)\n                    if i > 0:\n                        os.close(old_fds[0])\n                        os.close(old_fds[1])\n                    if i < len(args_list) - 1:\n                        old_fds = new_fds\n\n            if is_foreground:\n                self.jobs.append(('fg', children_pids))\n                try:\n                    for i in children_pids:\n                        os.waitpid(i, 0)\n                    self.jobs.pop()\n                except ChildProcessError:\n                    pass\n            else:\n                self.jobs.append(('bg', children_pids))\n                print(f'[{len(self.jobs) - 1}] new job added')\n\n        except OSError as e:\n            _clean_up(e)\n            if pid == 0:\n                exit(1)\n            else:\n                return\n\n    @staticmethod\n    def redirection_handler(args_with_redirection: [str]) -> ((bool, bool, bool), [str]):\n        \"\"\"handler for io redirection\n        index is true when corresponding (IN, OUT, ERR) redirected\n        also returns modified args (redirection operation removed)\"\"\"\n        args_with_redirection = list(args_with_redirection)\n        is_redirected = [False, False, False]\n        if '<' in args_with_redirection:\n            if not is_redirected[sys.stdin.fileno()]:\n                is_redirected[sys.stdin.fileno()] = True\n\n                file_path = args_with_redirection[args_with_redirection.index('<') + 1]\n\n                if args_with_redirection.index('<') + 1 < len(args_with_redirection):\n                    args_with_redirection.pop(args_with_redirection.index('<') + 1)\n                    args_with_redirection.pop(args_with_redirection.index('<'))\n                else:\n                    raise OSError('invalid usage of redirection and (or) piping')\n\n                fd = os.open(file_path, os.O_RDONLY, 0o644)\n                os.dup2(fd, sys.stdin.fileno())\n                os.close(fd)\n            else:\n                raise OSError('invalid usage of redirection and (or) piping')\n        if '>' in args_with_redirection:\n            if not is_redirected[sys.stdout.fileno()]:\n                is_redirected[sys.stdout.fileno()] = True\n\n                file_path = args_with_redirection[args_with_redirection.index('>') + 1]\n\n                if args_with_redirection.index('>') + 1 < len(args_with_redirection):\n                    args_with_redirection.pop(args_with_redirection.index('>') + 1)\n                    args_with_redirection.pop(args_with_redirection.index('>'))\n                else:\n                    raise OSError('invalid usage of redirection and (or) piping')\n\n                fd = os.open(file_path, os.O_WRONLY | os.O_CREAT, 0o644)\n                os.dup2(fd, sys.stdout.fileno())\n                os.close(fd)\n            else:\n                raise OSError('invalid usage of redirection and (or) piping')\n        if '2>' in args_with_redirection:\n            if not is_redirected[sys.stderr.fileno()]:\n                is_redirected[sys.stderr.fileno()] = True\n\n                file_path = args_with_redirection[args_with_redirection.index('2>') + 1]\n\n                if args_with_redirection.index('2>') + 1 < len(args_with_redirection):\n                    args_with_redirection.pop(args_with_redirection.index('2>') + 1)\n                    args_with_redirection.pop(args_with_redirection.index('2>'))\n                else:\n                    raise OSError('invalid usage of redirection and (or) piping')\n\n                fd = os.open(file_path, os.O_WRONLY | os.O_CREAT, 0o644)\n                os.dup2(fd, sys.stderr.fileno())\n                os.close(fd)\n            else:\n                raise OSError('invalid usage of redirection and (or) piping')\n        if '>>' in args_with_redirection:\n            if not is_redirected[sys.stdout.fileno()]:\n                is_redirected[sys.stdout.fileno()] = True\n\n                file_path = args_with_redirection[args_with_redirection.index('>>') + 1]\n\n                if args_with_redirection.index('>>') + 1 < len(args_with_redirection):\n                    args_with_redirection.pop(args_with_redirection.index('>>') + 1)\n                    args_with_redirection.pop(args_with_redirection.index('>>'))\n                else:\n                    raise OSError('invalid usage of redirection and (or) piping')\n\n                fd = os.open(file_path, os.O_APPEND | os.O_WRONLY | os.O_CREAT, 0o644)\n                os.dup2(fd, sys.stdout.fileno())\n                os.close(fd)\n            else:\n                raise OSError('invalid usage of redirection and (or) piping')\n        if '2>>' in args_with_redirection:\n            if not is_redirected[sys.stderr.fileno()]:\n                is_redirected[sys.stderr.fileno()] = True\n\n                file_path = args_with_redirection[args_with_redirection.index('2>>') + 1]\n\n                if args_with_redirection.index('2>>') + 1 < len(args_with_redirection):\n                    args_with_redirection.pop(args_with_redirection.index('2>>') + 1)\n                    args_with_redirection.pop(args_with_redirection.index('2>>'))\n                else:\n                    raise OSError('invalid usage of redirection and (or) piping')\n\n                fd = os.open(file_path, os.O_APPEND | os.O_WRONLY | os.O_CREAT, 0o644)\n                os.dup2(fd, sys.stderr.fileno())\n                os.close(fd)\n            else:\n                raise OSError('invalid usage of redirection and (or) piping')\n        if '&>' in args_with_redirection:\n            if not is_redirected[sys.stdout.fileno()] and not is_redirected[sys.stderr.fileno()]:\n                is_redirected[sys.stdout.fileno()] = True\n                is_redirected[sys.stderr.fileno()] = True\n\n                file_path = args_with_redirection[args_with_redirection.index('&>') + 1]\n\n                if args_with_redirection.index('&>') + 1 < len(args_with_redirection):\n                    args_with_redirection.pop(args_with_redirection.index('&>') + 1)\n                    args_with_redirection.pop(args_with_redirection.index('&>'))\n                else:\n                    raise OSError('invalid usage of redirection and (or) piping')\n\n                fd = os.open(file_path, os.O_WRONLY | os.O_CREAT, 0o644)\n                os.dup2(fd, sys.stderr.fileno())\n                os.dup2(fd, sys.stdout.fileno())\n                os.close(fd)\n            else:\n                raise OSError('invalid usage of redirection and (or) piping')\n        return tuple(is_redirected), args_with_redirection\n\n\nif __name__ == '__main__':\n    PyShell().cmdloop()";var b=function(e){function n(e){var t;return Object(s.a)(this,n),(t=Object(d.a)(this,Object(c.a)(n).call(this,e))).state={content:v,nextCharIndex:0,language:"python",minStep:10,maxStep:20,isUsingPanel:!0},t}return Object(p.a)(n,e),Object(l.a)(n,[{key:"showNextChar",value:function(){var e=this;this.state.nextCharIndex>=this.state.content.length||this.setState(function(n){return{nextCharIndex:n.nextCharIndex+(t=e.state.minStep,i=e.state.maxStep,t=Math.ceil(t),i=Math.floor(i),Math.floor(Math.random()*(i-t+1))+t)};var t,i})}},{key:"keyDownHandler",value:function(e){if(!this.state.isUsingPanel){this.showNextChar();var n=document.querySelector(".CodeDisplay > pre"),t=document.querySelector(".CodeDisplay > pre > code");n.scrollTo(0,t.clientHeight)}}},{key:"componentDidMount",value:function(){var e=this;document.addEventListener("keydown",function(n){e.keyDownHandler(n)})}},{key:"onInfoIconClicked",value:function(e){var n=document.querySelector(".InfoPanel");this.state.isUsingPanel?n.style.display="none":n.style.display="flex",this.setState(function(e){return{isUsingPanel:!e.isUsingPanel}}),e.preventDefault()}},{key:"onInfoPanelUpdate",value:function(e){this.setState(e),this.setState({nextCharIndex:0})}},{key:"render",value:function(){var e=this;return r.a.createElement("div",{className:"FakeCodeTyper"},r.a.createElement("div",{className:"InfoIcon",onClick:function(n){e.onInfoIconClicked(n)}},r.a.createElement("img",{src:E.a,alt:""})),r.a.createElement(_,{content:this.state.content.slice(0,this.state.nextCharIndex),language:this.state.language}),r.a.createElement(y,{onUpdate:function(n){e.onInfoPanelUpdate(n)}}))}}]),n}(r.a.Component);a.a.render(r.a.createElement(b,null),document.getElementById("root"))}},[[12,1,2]]]);
//# sourceMappingURL=main.2797b60e.chunk.js.map