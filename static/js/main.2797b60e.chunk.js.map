{"version":3,"sources":["assets/info-circle.svg","CodeDisplay.js","InfoPanel.js","constants.js","FakeCodeTyper.js","index.js"],"names":["module","exports","__webpack_require__","p","CodeDisplay","hljs","initHighlighting","document","querySelectorAll","forEach","block","highlightBlock","react_default","a","createElement","className","this","props","language","content","React","Component","InfoPanel","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","minStep","maxStep","getElementById","value","file","readFile","fileContent","handleChange","console","error","_context","t0","message","reader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onloadend","result","readAsText","event","target","newAppState","onUpdate","_this2","onClick","click","preventDefault","type","id","name","multiple","onChange","handleFile","files","handleLanguage","min","step","handleMinStep","handleMaxStep","href","rel","role","aria-label","DEFAULT_CODE","FakeCodeTyper","nextCharIndex","isUsingPanel","length","setState","max","Math","ceil","floor","random","showNextChar","pre","querySelector","code","scrollTo","clientHeight","_this3","addEventListener","keyDownHandler","infoPanel","style","display","newState","_this4","onInfoIconClicked","src","infoIcon","alt","src_CodeDisplay_0","slice","src_InfoPanel_0","onInfoPanelUpdate","ReactDOM","render","src_FakeCodeTyper_0"],"mappings":"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","file":"static/js/main.2797b60e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/info-circle.454c21c7.svg\";","import React from 'react';\nimport './CodeDisplay.scss';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/atom-one-dark.css';\n\nclass CodeDisplay extends React.Component {\n  componentDidMount() {\n    hljs.initHighlighting();\n  }\n\n  componentDidUpdate() {\n    document.querySelectorAll('pre code').forEach((block) => {\n      hljs.highlightBlock(block);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"CodeDisplay\">\n        <pre><code className={this.props.language}>{this.props.content}</code></pre>\n      </div>\n    );\n  }\n}\n\nexport default CodeDisplay;\n","import React from 'react';\nimport './InfoPanel.scss';\n\nclass InfoPanel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      language: 'python',\n      minStep: 3,\n      maxStep: 5\n    }\n  }\n\n  componentDidMount() {\n    document.getElementById('min-step').value = this.state.minStep;\n    document.getElementById('max-step').value = this.state.maxStep;\n    document.getElementById('programming-language').value='python';\n  }\n\n  async handleFile(file) {\n    try {\n      const fileContent = await this.readFile(file);\n      this.handleChange({content: fileContent});\n    } catch (e) {\n      console.error(e.message);\n    }\n  }\n\n  readFile(file) {\n    const reader = new FileReader();\n    return new Promise((resolve, reject) => {\n      reader.onerror = () => {\n        reader.abort();\n        reject(new DOMException('An error occured when reading the file'));\n      };\n\n      reader.onloadend = () => {\n        resolve(reader.result);\n      }\n\n      reader.readAsText(file);\n    });\n  }\n\n  handleLanguage(event) {\n    this.handleChange({language: event.target.value});\n  }\n\n  handleMinStep(event) {\n    this.handleChange({minStep: event.target.value});\n  }\n\n  handleMaxStep(event) {\n    this.handleChange({maxStep: event.target.value});\n  }\n\n  handleChange(newAppState) {\n    this.props.onUpdate(newAppState);\n  }\n\n  render() {\n    return (\n      <div className=\"InfoPanel\">\n        <h1>Fake Code Typer</h1>\n        <div className=\"description\">\n          <p>Settings will be automatically saved</p>\n          <p>The editor will be reset when changes saved</p>\n          <p>Click the info icon to close this panel and start typing</p>\n          <p>You can click the icon again to show this panel</p>\n        </div>\n        <h2>Source Code File</h2>\n        <button onClick={(event) => { document.getElementById('file').click(); event.preventDefault(); }}>\n          Browse...\n          </button>\n        <input type=\"file\" id=\"file\" name=\"file\" multiple={false} onChange={(event) => { this.handleFile(event.target.files[0]); }} />\n        <h2>Programming Language</h2>\n        <select id=\"programming-language\" name=\"programming-language\" onChange={(event) => {this.handleLanguage(event);}}>\n          <option value=\"c\">C</option>\n          <option value=\"cpp\">C++</option>\n          <option value=\"cs\">C#</option>\n          <option value=\"css\">CSS</option>\n          <option value=\"html\">HTML</option>\n          <option value=\"java\">Java</option>\n          <option value=\"javascript\">JavaScript</option>\n          <option value=\"json\">JSON</option>\n          <option value=\"markdown\">Markdown</option>\n          <option value=\"objc\">Objective-C</option>\n          <option value=\"python\">Python</option>\n          <option value=\"x86asm\">x86 Assembly</option>\n        </select>\n        <h2>Min step</h2>\n        <input type=\"number\" id=\"min-step\" min=\"1\" step=\"1\" onChange={(event) => {this.handleMinStep(event); }}></input>\n        <h2>Max step</h2>\n        <input type=\"number\" id=\"max-step\" min=\"1\" step=\"1\" onChange={(event) => {this.handleMaxStep(event); }}></input>\n        <div className=\"footer\">\n          <p>Created by <a href=\"https://github.com/WANGJIEKE\" target=\"_blank\" rel=\"noreferrer noopener\">WANGJIEKE</a> with <span role=\"img\" aria-label=\"love\">❤️</span><br />\n            Please check the <a href=\"https://github.com/WANGJIEKE/fake-code-typer\" target=\"_blank\" rel=\"noreferrer noopener\">GitHub repo</a> for source code<br />\n            <span>\n              Syntax highlighting by <a href=\"https://highlightjs.org\" target=\"_blank\" rel=\"noreferrer noopener\">highlight.js</a>; icons from <a href=\"https://www.iconfont.cn/collections/detail?cid=9402\" target=\"_blank\" rel=\"noreferrer noopener\">Ant Design icon library</a>\n            </span>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\n// TODO: props validation\n\nexport default InfoPanel;\n","const DEFAULT_CODE = `# -*- coding: utf-8 -*-\n# @GitHub Link: https://github.com/WANGJIEKE/PyShell\n\nimport cmd\nimport getpass\nimport itertools\nimport os\nimport shlex\nimport signal\nimport socket\nimport sys\n\n\nclass PyShell(cmd.Cmd):\n    @staticmethod\n    def home_abbr_to_full(abbr_path: str) -> str:\n        if abbr_path.startswith('~'):\n            abbr_path = abbr_path.replace('~', os.environ['HOME'], 1)\n        return abbr_path\n    \n    @staticmethod\n    def full_to_home_abbr(full_path: str) -> str:\n        if full_path.startswith(os.environ['HOME']):\n            full_path = full_path.replace(os.environ['HOME'], '~', 1)\n        return full_path\n\n    def __init__(self):\n        \"\"\"initialize PyShell object\"\"\"\n        super(PyShell, self).__init__()\n        self.intro = '==== Welcome to PyShell ===='\n        self.prompt = f'{getpass.getuser()}@{socket.gethostname()}:{PyShell.full_to_home_abbr(os.getcwd())}$ '\n        self.jobs = []\n\n    def cmdloop(self, intro=None):\n        while True:\n            try:\n                super(PyShell, self).cmdloop()\n            except KeyboardInterrupt:\n                print()\n                self.intro = ''\n                continue\n\n    def do_fg(self, _: str) -> None:\n        \"\"\"usage: fg [pid]\n        bring the most recent background job to foreground\"\"\"\n        print('fg: not implemented yet')\n\n    def do_jobs(self, _: str) -> None:\n        \"\"\"usage: jobs\n        list all background jobs\"\"\"\n        print('jobs: not implemented yet')\n\n    def do_exit(self, arg_str: str) -> None:\n        \"\"\"usage: exit [exitcode]\"\"\"\n        args = shlex.split(arg_str)\n        if len(args) > 1:\n            print('exit: too many arguments', file=sys.stderr)\n            return\n        if len(args) == 0 or args[0] == '':\n            exit(0)\n        try:\n            exit(int(args[0]))\n        except ValueError:\n            print('exit: invalid exit code', file=sys.stderr)\n\n    def do_cd(self, arg_str: str) -> None:\n        \"\"\"usage: cd target_path\"\"\"\n        args = shlex.split(arg_str)\n        if len(args) > 1:\n            print('cd: too many arguments', file=sys.stderr)\n            return\n        try:\n            if len(args) == 0 or args[0] == '':\n                os.chdir(os.environ['HOME'])\n            else:\n                os.chdir(PyShell.home_abbr_to_full(args[0]))\n        except FileNotFoundError:\n            print('cd: invalid path', file=sys.stderr)\n        except NotADirectoryError:\n            print('cd: not a directory', file=sys.stderr)\n        else:\n            self.prompt = f'{getpass.getuser()}@{socket.gethostname()}:{PyShell.full_to_home_abbr(os.getcwd())}$ '\n\n    def do_EOF(self, _: str) -> None:\n        \"\"\"EOF handler; equivalent to type exit\"\"\"\n        print()\n        exit(0)\n\n    def default(self, line: str) -> None:\n        \"\"\"handler for undocumented inputs\"\"\"\n        commands = shlex.split(line)\n\n        self.main_function(\n            [list(command)\n             for is_pipe_operator, command in itertools.groupby(commands, lambda word: word == '|')\n             if not is_pipe_operator],\n            '&' not in commands\n        )\n\n    def main_function(self, args_list: [[str]], is_foreground=True) -> None:\n        \"\"\"handler for command execution\"\"\"\n        children_pids = []\n        new_fds, old_fds = [], []\n\n        if not is_foreground:  # background support not implemented\n            while True:\n                _input = input('pysh: background process not implement yet. Rerun on foreground? [y/n] ')\n                if _input == 'y':\n                    args_list[-1].pop()\n                    is_foreground = True\n                    break\n                elif _input == 'n':\n                    return\n                else:\n                    print('\\tenter either \"y\" or \"n\"')\n\n        def _clean_up(error: OSError) -> None:\n            map(lambda _pid: os.kill(_pid, signal.SIGKILL), children_pids)\n            print(f'{args_list[i][0]}: {error}', file=sys.stderr)\n\n        pid = -1\n\n        try:\n            for i in range(len(args_list)):\n                if i < len(args_list) - 1:  # if there is a next cmd\n                    new_fds = os.pipe()\n\n                pid = os.fork()\n                if pid == 0:\n                    redirect_result, args_list[i] = PyShell.redirection_handler(args_list[i])\n\n                    if i < len(args_list) - 1:  # if there is a next cmd\n                        os.close(new_fds[0])\n                        os.dup2(new_fds[1], sys.stdout.fileno())\n                        os.close(new_fds[1])\n\n                        if redirect_result[sys.stdout.fileno()] is True:\n                            raise OSError('invalid usage of redirection and (or) piping')\n\n                    if i > 0:  # if there is a previous cmd\n                        os.dup2(old_fds[0], sys.stdin.fileno())\n                        os.close(old_fds[0])\n                        os.close(old_fds[1])\n\n                        if redirect_result[sys.stdin.fileno()] is True:\n                            raise OSError('invalid usage of redirection and (or) piping')\n\n                    os.execvp(args_list[i][0], args_list[i])\n\n                else:\n                    children_pids.append(pid)\n                    if i > 0:\n                        os.close(old_fds[0])\n                        os.close(old_fds[1])\n                    if i < len(args_list) - 1:\n                        old_fds = new_fds\n\n            if is_foreground:\n                self.jobs.append(('fg', children_pids))\n                try:\n                    for i in children_pids:\n                        os.waitpid(i, 0)\n                    self.jobs.pop()\n                except ChildProcessError:\n                    pass\n            else:\n                self.jobs.append(('bg', children_pids))\n                print(f'[{len(self.jobs) - 1}] new job added')\n\n        except OSError as e:\n            _clean_up(e)\n            if pid == 0:\n                exit(1)\n            else:\n                return\n\n    @staticmethod\n    def redirection_handler(args_with_redirection: [str]) -> ((bool, bool, bool), [str]):\n        \"\"\"handler for io redirection\n        index is true when corresponding (IN, OUT, ERR) redirected\n        also returns modified args (redirection operation removed)\"\"\"\n        args_with_redirection = list(args_with_redirection)\n        is_redirected = [False, False, False]\n        if '<' in args_with_redirection:\n            if not is_redirected[sys.stdin.fileno()]:\n                is_redirected[sys.stdin.fileno()] = True\n\n                file_path = args_with_redirection[args_with_redirection.index('<') + 1]\n\n                if args_with_redirection.index('<') + 1 < len(args_with_redirection):\n                    args_with_redirection.pop(args_with_redirection.index('<') + 1)\n                    args_with_redirection.pop(args_with_redirection.index('<'))\n                else:\n                    raise OSError('invalid usage of redirection and (or) piping')\n\n                fd = os.open(file_path, os.O_RDONLY, 0o644)\n                os.dup2(fd, sys.stdin.fileno())\n                os.close(fd)\n            else:\n                raise OSError('invalid usage of redirection and (or) piping')\n        if '>' in args_with_redirection:\n            if not is_redirected[sys.stdout.fileno()]:\n                is_redirected[sys.stdout.fileno()] = True\n\n                file_path = args_with_redirection[args_with_redirection.index('>') + 1]\n\n                if args_with_redirection.index('>') + 1 < len(args_with_redirection):\n                    args_with_redirection.pop(args_with_redirection.index('>') + 1)\n                    args_with_redirection.pop(args_with_redirection.index('>'))\n                else:\n                    raise OSError('invalid usage of redirection and (or) piping')\n\n                fd = os.open(file_path, os.O_WRONLY | os.O_CREAT, 0o644)\n                os.dup2(fd, sys.stdout.fileno())\n                os.close(fd)\n            else:\n                raise OSError('invalid usage of redirection and (or) piping')\n        if '2>' in args_with_redirection:\n            if not is_redirected[sys.stderr.fileno()]:\n                is_redirected[sys.stderr.fileno()] = True\n\n                file_path = args_with_redirection[args_with_redirection.index('2>') + 1]\n\n                if args_with_redirection.index('2>') + 1 < len(args_with_redirection):\n                    args_with_redirection.pop(args_with_redirection.index('2>') + 1)\n                    args_with_redirection.pop(args_with_redirection.index('2>'))\n                else:\n                    raise OSError('invalid usage of redirection and (or) piping')\n\n                fd = os.open(file_path, os.O_WRONLY | os.O_CREAT, 0o644)\n                os.dup2(fd, sys.stderr.fileno())\n                os.close(fd)\n            else:\n                raise OSError('invalid usage of redirection and (or) piping')\n        if '>>' in args_with_redirection:\n            if not is_redirected[sys.stdout.fileno()]:\n                is_redirected[sys.stdout.fileno()] = True\n\n                file_path = args_with_redirection[args_with_redirection.index('>>') + 1]\n\n                if args_with_redirection.index('>>') + 1 < len(args_with_redirection):\n                    args_with_redirection.pop(args_with_redirection.index('>>') + 1)\n                    args_with_redirection.pop(args_with_redirection.index('>>'))\n                else:\n                    raise OSError('invalid usage of redirection and (or) piping')\n\n                fd = os.open(file_path, os.O_APPEND | os.O_WRONLY | os.O_CREAT, 0o644)\n                os.dup2(fd, sys.stdout.fileno())\n                os.close(fd)\n            else:\n                raise OSError('invalid usage of redirection and (or) piping')\n        if '2>>' in args_with_redirection:\n            if not is_redirected[sys.stderr.fileno()]:\n                is_redirected[sys.stderr.fileno()] = True\n\n                file_path = args_with_redirection[args_with_redirection.index('2>>') + 1]\n\n                if args_with_redirection.index('2>>') + 1 < len(args_with_redirection):\n                    args_with_redirection.pop(args_with_redirection.index('2>>') + 1)\n                    args_with_redirection.pop(args_with_redirection.index('2>>'))\n                else:\n                    raise OSError('invalid usage of redirection and (or) piping')\n\n                fd = os.open(file_path, os.O_APPEND | os.O_WRONLY | os.O_CREAT, 0o644)\n                os.dup2(fd, sys.stderr.fileno())\n                os.close(fd)\n            else:\n                raise OSError('invalid usage of redirection and (or) piping')\n        if '&>' in args_with_redirection:\n            if not is_redirected[sys.stdout.fileno()] and not is_redirected[sys.stderr.fileno()]:\n                is_redirected[sys.stdout.fileno()] = True\n                is_redirected[sys.stderr.fileno()] = True\n\n                file_path = args_with_redirection[args_with_redirection.index('&>') + 1]\n\n                if args_with_redirection.index('&>') + 1 < len(args_with_redirection):\n                    args_with_redirection.pop(args_with_redirection.index('&>') + 1)\n                    args_with_redirection.pop(args_with_redirection.index('&>'))\n                else:\n                    raise OSError('invalid usage of redirection and (or) piping')\n\n                fd = os.open(file_path, os.O_WRONLY | os.O_CREAT, 0o644)\n                os.dup2(fd, sys.stderr.fileno())\n                os.dup2(fd, sys.stdout.fileno())\n                os.close(fd)\n            else:\n                raise OSError('invalid usage of redirection and (or) piping')\n        return tuple(is_redirected), args_with_redirection\n\n\nif __name__ == '__main__':\n    PyShell().cmdloop()`;\n\nexport default DEFAULT_CODE;\n","import React from 'react';\nimport './FakeCodeTyper.scss';\n\nimport CodeDisplay from './CodeDisplay';\nimport InfoPanel from './InfoPanel';\nimport infoIcon from './assets/info-circle.svg';\nimport DEFAULT_CODE from './constants';\n\nfunction getRandIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nclass FakeCodeTyper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: DEFAULT_CODE,\n      nextCharIndex: 0,\n      language: 'python',\n      minStep: 10,\n      maxStep: 20,\n      isUsingPanel: true\n    };\n  }\n\n  showNextChar() {\n    if (this.state.nextCharIndex >= this.state.content.length) {\n      return;\n    }\n\n    this.setState((state) => {\n      return {\n        nextCharIndex: state.nextCharIndex + getRandIntInclusive(this.state.minStep, this.state.maxStep)\n      }\n    });\n  }\n\n  keyDownHandler(event) {\n    if (this.state.isUsingPanel) {\n      return;\n    }\n    this.showNextChar();\n    const pre = document.querySelector('.CodeDisplay > pre');\n    const code = document.querySelector('.CodeDisplay > pre > code');\n    pre.scrollTo(0, code.clientHeight);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', (event) => { this.keyDownHandler(event); })\n  }\n\n  onInfoIconClicked(event) {\n    const infoPanel = document.querySelector('.InfoPanel');\n    if (this.state.isUsingPanel) {\n      infoPanel.style.display = 'none';\n    } else {\n      infoPanel.style.display = 'flex';\n    }\n    this.setState((state) => {\n      return { isUsingPanel: !state.isUsingPanel };\n    });\n    event.preventDefault();\n  }\n\n  onInfoPanelUpdate(newState) {\n    this.setState(newState);\n    this.setState({nextCharIndex: 0});\n  }\n\n  render() {\n    return (\n      <div className=\"FakeCodeTyper\">\n        <div className=\"InfoIcon\" onClick={(event) => { this.onInfoIconClicked(event); }}>\n          <img src={infoIcon} alt=\"\"></img>\n        </div>\n        <CodeDisplay\n          content={this.state.content.slice(0, this.state.nextCharIndex)}\n          language={this.state.language} \n        />\n        <InfoPanel onUpdate={(newState) => { this.onInfoPanelUpdate(newState); }} />\n      </div>\n    );\n  }\n}\n\nexport default FakeCodeTyper;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport FakeCodeTyper from './FakeCodeTyper';\n\nReactDOM.render(<FakeCodeTyper />, document.getElementById('root'));\n"],"sourceRoot":""}